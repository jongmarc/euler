package nl.ramblings.euler.set000;

/**
 * Project Euler.net - Problem 2
 * 
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting 
 * with 1 and 2, the first 10 terms will be:
 * 
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * 
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 * 
 * @author Marco de Jong
 */
public class Problem002 {
    
    public int sumOfEvenFibonacciNumbers(int maxNaturalNumber) {
        if (maxNaturalNumber < 2)
            return 0;
        if (maxNaturalNumber < 8)
            return 2;
        
        int result = 2;
        int previous = 2;
        int counter = 3;
        int placeholder;
        
        while (counter + previous <= maxNaturalNumber) {
            placeholder = counter + previous;
            previous = counter;
            counter = placeholder;
            if (counter % 2 == 0) 
                result += counter;
        }

        return result;
    }

    public int efficientSumOfEvenFibonacciNumbers(int maxNaturalNumber) {
        int sum = 0;
        int a = 1;
        int b = 1;
        int c = a + b;
        while (c <= maxNaturalNumber) {
            sum = sum + c;
            a = b + c;
            b = c + a;
            c = a + b;
        }
        return sum;
    }
    
    public static void main(String[] args) {
        Problem002 problem = new Problem002();
        long start = System.nanoTime();
        long result = problem.sumOfEvenFibonacciNumbers(3999999);
        long stop = System.nanoTime();
        long duration = stop - start;
        System.out.println("Problem 2 with my algorithm\n"+ result + " in " + duration + " nanoseconds.");
        start = System.nanoTime();
        result = problem.efficientSumOfEvenFibonacciNumbers(3999999);
        stop = System.nanoTime();
        System.out.println("\nProblem 2 with efficient algorithm\n"+result + " in " + (stop - start) + " nanoseconds (" + String.format("%.2f", (float)(stop - start)/duration*100) + "% of original time).");
    }
}
