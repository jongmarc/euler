package nl.ramblings.euler.set010;
import java.util.HashMap;
import java.util.Iterator;


/**
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * 
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 * Let us list the factors of the first seven triangle numbers:
 * 
 *  1: 1
 *  3: 1,3
 *  6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * 
 * We can see that 28 is the first triangle number to have over five divisors.
 * 
 * What is the value of the first triangle number to have over five hundred divisors?
 * 
 * @author Marco de Jong
 */
public class Problem012 {

    public static void main(String[] args) {

        Problem012 problem = new Problem012();
        long start = System.nanoTime();
        int result = problem.highlyDivisibleTriangularNumber(250);
        long stop = System.nanoTime();
        long duration = stop - start;
        System.out.println("Problem 12 (but only run to 250 instead of 500 as this takes 23 minutes!) with my algorithm\n"+ result + " in " + duration + " nanoseconds.");
        start = System.nanoTime();
        result = problem.betterHighlyDivisibleTriangularNumber(500);
        stop = System.nanoTime();
        System.out.println("\nProblem 12 with my better algorithm\n"+result + " in " + (stop - start) + " nanoseconds (" + String.format("%.2f", (float)(stop - start)/duration*100) + "% of original time).");
        start = System.nanoTime();
        result = problem.efficientHighlyDivisibleTriangularNumber(500);
        stop = System.nanoTime();
        System.out.println("\nProblem 12 with efficient algorithm\n"+result + " in " + (stop - start) + " nanoseconds (" + String.format("%.2f", (float)(stop - start)/duration*100) + "% of original time).");

    }

    public HashMap<Integer, Integer> primeFactors(int number) {
        int n = number;
        HashMap<Integer, Integer> factors = new HashMap<Integer, Integer>();
        for (int i = 2; i <= n / i; i++) {
            while (n % i == 0) {
                
                factors.put(i, factors.get(i) != null ? factors.get(i) + 1 : 1);
                n /= i;
            }
        }
        if (n > 1) {
          factors.put(n, factors.get(n) != null ? factors.get(n) + 1 : 1);
        }
        return factors;
    }
    
    public int efficientHighlyDivisibleTriangularNumber(int numberOfDivisors) {
        int n = 3;    //start with a prime
        int Dn = 2;   //number of divisors for any prime
        int cnt = 0;  //to insure the while loop is entered
        int n1, Dn1, exponent;
        int[] primearray = new int[] { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997 };
        
        while (cnt <= 500) {
            n++;
            n1 = n;
            if (n1 % 2 == 0)
                n1 = n1 / 2;
            Dn1 = 1;
           
            for (int i = 0; i < primearray.length; i++) {
                
                if (primearray[i] * primearray[i] > n1 ) {
                    Dn1 = 2 * Dn1;
                    break;
                }
                
                // when the prime divisor would be greater than the residual n1,
                // that residual n1 is the last prime factor with an exponent = 1
                // no necessity to identify it.
                exponent = 1;
                while (n1 % primearray[i] == 0) {
                    exponent++;
                    n1 = n1 / primearray[i];
                }
                
                if (exponent > 1)
                    Dn1 = Dn1 * exponent;
                if (n1 == 1)
                    break;
            }
            cnt = Dn * Dn1;
            Dn = Dn1;
        }
               
        return n * (n - 1) / 2;
    }
    
    public int betterHighlyDivisibleTriangularNumber(int numberOfDivisors) {
        if (numberOfDivisors == 1)
            return 1;

        int nextTriangle = iterator().next();
        int foundNumberOfDivisors = 1;
        do {
            nextTriangle = iterator().next();

            foundNumberOfDivisors = 1;
            HashMap<Integer, Integer> factor = primeFactors(nextTriangle);
            for (Integer exponent: factor.values())
                foundNumberOfDivisors *= (exponent + 1);
  
        } while (foundNumberOfDivisors < numberOfDivisors);
        
        return nextTriangle;
    }

    public int highlyDivisibleTriangularNumber(int numberOfDivisors){
        if (numberOfDivisors == 1)
            return 1;
        
        int foundNumberOfDivisors = 2;  // you can always divide by 1 or yourself for n > 1
        int nextTriangle = iterator().next();

        do {
            nextTriangle = iterator().next();

            foundNumberOfDivisors = 2;
            for (int i = 2; i <= nextTriangle / 2; i++)
                if ( nextTriangle % i == 0)
                    foundNumberOfDivisors++; 
        } while (foundNumberOfDivisors < numberOfDivisors);
        return nextTriangle;
    }

    /**
     * Remember the iterator in this class
     **/
    private Iterator<Integer> iterator;
    
    /**
     * Triangle generator
     * 
     * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th 
     * triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
     * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
     * @return iterator that iterates the triangle terms
     */
    private Iterator<Integer> iterator() {
        if (iterator == null)
            this.iterator = new Iterator<Integer>() {
                private int currentIndex = 0;
                private int currentSum = 0;
    
                public boolean hasNext() {
                    return currentSum + currentIndex + 1 < Integer.MAX_VALUE;
                }
    
                public Integer next() {
                    currentIndex += 1;
                    currentSum += currentIndex;
                    return currentSum;
                }
    
                public void remove() {
                    this.next();
                }
            };
        return this.iterator;
    }
}